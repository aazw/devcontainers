name: Build devcontainer images

on:
  push:
    branches: [main]
    paths:
      - "images/*/.devcontainer/Dockerfile"
  workflow_dispatch:
    inputs:
      target:
        description: "Build target"
        required: true
        type: choice
        options:
          - all
          - base
          - go
          - rust
          - java
          - swift
          # 他のイメージ名を随時追加
        default: "all"

run-name: |
  ${{ 
    github.event_name == 'pull_request' && format('🔀 PR #{0} - {1}', github.event.pull_request.number, github.event.pull_request.title) ||
    github.event_name == 'push' && format('📦 Push by @{0} - {1}', github.actor, github.event.head_commit.message) ||
    github.event_name == 'workflow_dispatch' && format('🖱️ Manual run by @{0}', github.actor) ||
    format('❓ {0} by @{1}', github.event_name, github.actor)
  }}

permissions:
  contents: read
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.filter.outputs.devcontainers_files || steps.all.outputs.devcontainers_files || '[]' }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        if: github.event_name == 'push'
        id: filter
        with:
          list-files: json
          filters: |
            devcontainers:
              - "images/*/.devcontainer/Dockerfile"
      - name: Get all Dockerfiles
        if: github.event_name == 'workflow_dispatch'
        id: all
        shell: bash
        run: |
          TARGET="${{ github.event.inputs.target }}"

          if [ "$TARGET" = "all" ]; then
            # すべてのDockerfileを取得
            FILES=$(git ls-files 'images/*/.devcontainer/Dockerfile' \
              | jq -R -s -c 'split("\n") | map(select(length > 0))')
          else
            # 特定のイメージのみ
            FILES=$(echo "images/$TARGET/.devcontainer/Dockerfile" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi

          echo "devcontainers_files=$FILES" >> "$GITHUB_OUTPUT"

  build-devcontainer-images:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_files != '[]' && needs.detect-changes.outputs.changed_files != ''
    runs-on: ubuntu-latest
    concurrency:
      group: build-devcontainer-${{ matrix.dockerfile }}
      cancel-in-progress: false
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.detect-changes.outputs.changed_files) }}
    steps:
      - uses: actions/checkout@v5

      - name: Derive build context and image name
        id: prep
        run: |
          DOCKERFILE='${{ matrix.dockerfile }}'                            # e.g. images/base/.devcontainer/Dockerfile
          CONTEXT="$(dirname "$DOCKERFILE")"                               # => images/base/.devcontainer
          IMAGE_NAME="$(basename "$(dirname "$(dirname "$DOCKERFILE")")")" # => base
          echo "context=$CONTEXT" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          sudo docker system prune -af --volumes
          sudo apt-get clean
          df -h

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute next numeric tag per image
        id: next
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          IMAGE_NAME="${{ steps.prep.outputs.image }}"
          PKG="devcontainers/${IMAGE_NAME}"
          PKG_ENC="${PKG//\//%2F}"
          OWNER="${{ github.repository_owner }}"

          # 最新100件を取得（デフォルトで新しい順）
          VERS="$(gh api "/users/${OWNER}/packages/container/${PKG_ENC}/versions?per_page=100" || echo '[]')"

          # 既存の数値タグの最大値+1を計算
          NEXT="$(printf '%s' "${VERS}" | jq -r '[.[].metadata.container.tags[]? | select(test("^[0-9]+$")) | tonumber] | (max? // 0) + 1')"

          echo "value=${NEXT}" >> "$GITHUB_OUTPUT"

      - name: Build & push ${{ steps.prep.outputs.image }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.prep.outputs.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:${{ github.sha }}
            ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:${{ steps.next.outputs.value }}
            ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pull: true
          provenance: false
          sbom: false
