name: Build devcontainer images

on:
  push:
    branches: [main]
    paths:
      - "images/*/.devcontainer/Dockerfile"
  workflow_dispatch:
    inputs:
      target:
        description: "Build target"
        required: true
        type: choice
        options:
          - all
          - base
          - go
          - rust
          - java
          - swift
          # 他のイメージ名を随時追加
        default: "all"

run-name: |
  ${{ 
    github.event_name == 'pull_request' && format('🔀 PR #{0} - {1}', github.event.pull_request.number, github.event.pull_request.title) ||
    github.event_name == 'push' && format('📦 Push by @{0} - {1}', github.actor, github.event.head_commit.message) ||
    github.event_name == 'workflow_dispatch' && format('🖱️ Manual run by @{0}', github.actor) ||
    format('❓ {0} by @{1}', github.event_name, github.actor)
  }}

permissions:
  contents: read
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.filter.outputs.devcontainers_files || steps.all.outputs.devcontainers_files || '[]' }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        if: github.event_name == 'push'
        id: filter
        with:
          list-files: json
          filters: |
            devcontainers:
              - "images/*/.devcontainer/Dockerfile"
      - name: Get all Dockerfiles
        if: github.event_name == 'workflow_dispatch'
        id: all
        shell: bash
        run: |
          TARGET="${{ github.event.inputs.target }}"

          if [ "$TARGET" = "all" ]; then
            # すべてのDockerfileを取得
            FILES=$(git ls-files 'images/*/.devcontainer/Dockerfile' \
              | jq -R -s -c 'split("\n") | map(select(length > 0))')
          else
            # 特定のイメージのみ
            FILES=$(echo "images/$TARGET/.devcontainer/Dockerfile" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi

          echo "devcontainers_files=$FILES" >> "$GITHUB_OUTPUT"

  build-devcontainer-images:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed_files != '[]' && needs.detect-changes.outputs.changed_files != ''
    runs-on: ubuntu-latest
    concurrency:
      group: build-devcontainer-${{ matrix.dockerfile }}
      cancel-in-progress: false
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.detect-changes.outputs.changed_files) }}
    steps:
      - uses: actions/checkout@v5

      # Push イベントの場合、PR情報を取得
      - name: Find associated PR
        id: find-pr
        if: github.event_name == 'push'
        uses: actions/github-script@v8
        with:
          script: |
            const commit = context.sha;
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commit
            });

            if (prs.length > 0) {
              core.setOutput('pr_number', prs[0].number);
              core.setOutput('pr_title', prs[0].title);
              core.setOutput('pr_author', prs[0].user.login);
            }

      - name: Derive build context and image name
        id: prep
        run: |
          DOCKERFILE='${{ matrix.dockerfile }}'                            # e.g. images/base/.devcontainer/Dockerfile
          CONTEXT="$(dirname "$DOCKERFILE")"                               # => images/base/.devcontainer
          IMAGE_NAME="$(basename "$(dirname "$(dirname "$DOCKERFILE")")")" # => base
          echo "context=$CONTEXT" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          sudo docker system prune -af --volumes
          sudo apt-get clean
          df -h

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute next numeric tag per image
        id: next
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          IMAGE_NAME="${{ steps.prep.outputs.image }}"
          PKG="devcontainers/${IMAGE_NAME}"
          PKG_ENC="${PKG//\//%2F}"
          OWNER="${{ github.repository_owner }}"

          # 最新100件を取得（デフォルトで新しい順）
          VERS="$(gh api "/users/${OWNER}/packages/container/${PKG_ENC}/versions?per_page=100" || echo '[]')"

          # 既存の数値タグの最大値+1を計算
          NEXT="$(printf '%s' "${VERS}" | jq -r '[.[].metadata.container.tags[]? | select(test("^[0-9]+$")) | tonumber] | (max? // 0) + 1')"

          echo "value=${NEXT}" >> "$GITHUB_OUTPUT"

        # 🎯 ビルド前のサマリー（エラー時でも見える情報）
      - name: Create pre-build summary
        run: |
          echo "# 🚀 Build Started: ${{ steps.prep.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # ビルド対象情報
          echo "## 🐳 Build Target" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image Name | \`${{ steps.prep.outputs.image }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Dockerfile | \`${{ matrix.dockerfile }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Context | \`${{ steps.prep.outputs.context }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Next Tag | \`${{ steps.next.outputs.value }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # トリガー情報
          echo "## 📋 Trigger Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Event Type | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Triggered by | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | [\`${GITHUB_SHA::7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| Started at | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # PR情報（pushイベントで見つかった場合）
          if [ "${{ github.event_name }}" == "push" ] && [ -n "${{ steps.find-pr.outputs.pr_number }}" ]; then
            echo "## 🔀 Associated Pull Request" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **PR Number:** [#${{ steps.find-pr.outputs.pr_number }}](https://github.com/${{ github.repository }}/pull/${{ steps.find-pr.outputs.pr_number }})" >> $GITHUB_STEP_SUMMARY
            echo "- **Title:** ${{ steps.find-pr.outputs.pr_title }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Author:** @${{ steps.find-pr.outputs.pr_author }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Manual runの場合
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "## 🖱️ Manual Deployment" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Target:** \`${{ github.event.inputs.target }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # リンク集
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [📝 Commit Details](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- [🌳 Branch: ${{ github.ref_name }}](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📁 Dockerfile](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/${{ matrix.dockerfile }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⏳ **Building Docker image...**" >> $GITHUB_STEP_SUMMARY

      - name: Build & push ${{ steps.prep.outputs.image }}
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.prep.outputs.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:${{ github.sha }}
            ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:${{ steps.next.outputs.value }}
            ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pull: true
          provenance: false
          sbom: false

      # ✅ ビルド後のサマリー（成功時のみ表示）
      - name: Add build results to summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image Name | \`ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Digest | \`${{ steps.docker_build.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Platforms | \`linux/amd64, linux/arm64\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Completed | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🏷️ Published Tags" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:${{ steps.next.outputs.value }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📥 Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/aazw/devcontainers/${{ steps.prep.outputs.image }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY

      # ❌ ビルド失敗時のサマリー
      - name: Add failure summary
        if: failure()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.prep.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for detailed error information." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Troubleshooting Tips" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Check if the Dockerfile syntax is correct" >> $GITHUB_STEP_SUMMARY
          echo "- Verify all base images are accessible" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure sufficient disk space is available" >> $GITHUB_STEP_SUMMARY
          echo "- Review the build logs for specific error messages" >> $GITHUB_STEP_SUMMARY
